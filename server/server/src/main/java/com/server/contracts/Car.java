package com.server.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.0.
 */
@SuppressWarnings("rawtypes")
public class Car extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_CARDETAILS = "carDetails";

    public static final String FUNC_CENTRALCONTRACT = "centralContract";

    public static final String FUNC_GETCARDETAILS = "getCarDetails";

    public static final String FUNC_GETVERIFICATIONHISTORY = "getVerificationHistory";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEDETAILS = "updateDetails";

    public static final String FUNC_VERIFICATIONS = "verifications";

    public static final String FUNC_VERIFYCAR = "verifyCar";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Car(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Car(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Car(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Car(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {

        // Create a list to store event responses
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<>();

        // Extract logs from the transaction receipt
        List<Log> logs = transactionReceipt.getLogs();

        // Iterate through each log
        for (Log log : logs) {
            // Extract event values using each log
            Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);

            // Check if eventValues is not null before proceeding
            if (eventValues != null) {
                // Create a new response object and map values
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = eventValues.getLog();
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();

                // Add the response object to the list
                responses.add(typedResponse);
            }
        }

        // Return the list of event responses
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public RemoteFunctionCall<Tuple2<String, Details>> carDetails() {
        final Function function = new Function(FUNC_CARDETAILS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Details>() {}));
        return new RemoteFunctionCall<Tuple2<String, Details>>(function,
                new Callable<Tuple2<String, Details>>() {
                    @Override
                    public Tuple2<String, Details> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, Details>(
                                (String) results.get(0).getValue(), 
                                (Details) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<String> centralContract() {
        final Function function = new Function(FUNC_CENTRALCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<CarInfo> getCarDetails() {
        final Function function = new Function(FUNC_GETCARDETAILS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<CarInfo>() {}));
        return executeRemoteCallSingleValueReturn(function, CarInfo.class);
    }

    public RemoteFunctionCall<List> getVerificationHistory() {
        final Function function = new Function(FUNC_GETVERIFICATIONHISTORY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<VerificationDetails>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateDetails(Details newDetails) {
        final Function function = new Function(
                FUNC_UPDATEDETAILS, 
                Arrays.<Type>asList(newDetails), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<Details, BigInteger, BigInteger, String>> verifications(
            BigInteger param0) {
        final Function function = new Function(FUNC_VERIFICATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Details>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple4<Details, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple4<Details, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple4<Details, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Details, BigInteger, BigInteger, String>(
                                (Details) results.get(0), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> verifyCar(
            VerificationDetails verificationDetails) {
        final Function function = new Function(
                FUNC_VERIFYCAR, 
                Arrays.<Type>asList(verificationDetails), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Car load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new Car(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Car load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Car(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Car load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new Car(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Car load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Car(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Car> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider, CarInfo _carDetails, String _centralAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_carDetails, 
                new org.web3j.abi.datatypes.Address(160, _centralAddress)));
        return deployRemoteCall(Car.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    public static RemoteCall<Car> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider, CarInfo _carDetails, String _centralAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_carDetails, 
                new org.web3j.abi.datatypes.Address(160, _centralAddress)));
        return deployRemoteCall(Car.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Car> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
            BigInteger gasLimit, CarInfo _carDetails, String _centralAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_carDetails, 
                new org.web3j.abi.datatypes.Address(160, _centralAddress)));
        return deployRemoteCall(Car.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Car> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit, CarInfo _carDetails, String _centralAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(_carDetails, 
                new org.web3j.abi.datatypes.Address(160, _centralAddress)));
        return deployRemoteCall(Car.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), encodedConstructor);
    }

    public static void linkLibraries(String bytecode, Map<String, String> libraryAddresses) {
        for (Map.Entry<String, String> entry : libraryAddresses.entrySet()) {
            String libraryName = entry.getKey();
            String libraryAddress = entry.getValue();
            String placeholder = "__" + libraryName + "_".repeat(38 - libraryName.length()); // Creating a placeholder pattern
            bytecode = bytecode.replace(placeholder, libraryAddress.replace("0x", ""));
        }
        librariesLinkedBinary = bytecode;
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Details extends DynamicStruct {
        public String vin;

        public String manufacturer;

        public String model;

        public String productionYear;

        public String fuelType;

        public String plateNumber;

        public String color;

        public Details(String vin, String manufacturer, String model, String productionYear,
                String fuelType, String plateNumber, String color) {
            super(new org.web3j.abi.datatypes.Utf8String(vin), 
                    new org.web3j.abi.datatypes.Utf8String(manufacturer), 
                    new org.web3j.abi.datatypes.Utf8String(model), 
                    new org.web3j.abi.datatypes.Utf8String(productionYear), 
                    new org.web3j.abi.datatypes.Utf8String(fuelType), 
                    new org.web3j.abi.datatypes.Utf8String(plateNumber), 
                    new org.web3j.abi.datatypes.Utf8String(color));
            this.vin = vin;
            this.manufacturer = manufacturer;
            this.model = model;
            this.productionYear = productionYear;
            this.fuelType = fuelType;
            this.plateNumber = plateNumber;
            this.color = color;
        }

        public Details(Utf8String vin, Utf8String manufacturer, Utf8String model,
                Utf8String productionYear, Utf8String fuelType, Utf8String plateNumber,
                Utf8String color) {
            super(vin, manufacturer, model, productionYear, fuelType, plateNumber, color);
            this.vin = vin.getValue();
            this.manufacturer = manufacturer.getValue();
            this.model = model.getValue();
            this.productionYear = productionYear.getValue();
            this.fuelType = fuelType.getValue();
            this.plateNumber = plateNumber.getValue();
            this.color = color.getValue();
        }
    }

    public static class CarInfo extends DynamicStruct {
        public String carOwnerName;

        public Details details;

        public CarInfo(String carOwnerName, Details details) {
            super(new org.web3j.abi.datatypes.Utf8String(carOwnerName), 
                    details);
            this.carOwnerName = carOwnerName;
            this.details = details;
        }

        public CarInfo(Utf8String carOwnerName, Details details) {
            super(carOwnerName, details);
            this.carOwnerName = carOwnerName.getValue();
            this.details = details;
        }
    }

    public static class VerificationDetails extends DynamicStruct {
        public Details details;

        public BigInteger pollutionCoefficient;

        public BigInteger cubicVolume;

        public String observations;

        public VerificationDetails(Details details, BigInteger pollutionCoefficient,
                BigInteger cubicVolume, String observations) {
            super(details, 
                    new org.web3j.abi.datatypes.generated.Uint256(pollutionCoefficient), 
                    new org.web3j.abi.datatypes.generated.Uint256(cubicVolume), 
                    new org.web3j.abi.datatypes.Utf8String(observations));
            this.details = details;
            this.pollutionCoefficient = pollutionCoefficient;
            this.cubicVolume = cubicVolume;
            this.observations = observations;
        }

        public VerificationDetails(Details details, Uint256 pollutionCoefficient,
                Uint256 cubicVolume, Utf8String observations) {
            super(details, pollutionCoefficient, cubicVolume, observations);
            this.details = details;
            this.pollutionCoefficient = pollutionCoefficient.getValue();
            this.cubicVolume = cubicVolume.getValue();
            this.observations = observations.getValue();
        }
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }
}
